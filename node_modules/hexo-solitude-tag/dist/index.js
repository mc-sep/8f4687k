"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bvideoTag = bvideoTag;
exports.youtubeTag = youtubeTag;
exports.spanTag = spanTag;
exports.pTag = pTag;
exports.foldTag = foldTag;
exports.audioTag = audioTag;
exports.videoTag = videoTag;
exports.videosTag = videosTag;
exports.linkTag = linkTag;
exports.imgTag = imgTag;
exports.inlineImgTag = inlineImgTag;
exports.checkboxTag = checkboxTag;
exports.radioTag = radioTag;
exports.noteTag = noteTag;
exports.timelineTag = timelineTag;
exports.timenodeTag = timenodeTag;
exports.buttonTag = buttonTag;
exports.githubTag = githubTag;
exports.gitlabTag = gitlabTag;
exports.giteeTag = giteeTag;
exports.giteaTag = giteaTag;
exports.bubbleTag = bubbleTag;
exports.keyboardTag = keyboardTag;
exports.spoilerTag = spoilerTag;
exports.cardTag = cardTag;
const node_path_1 = __importDefault(require("node:path"));
const hexo_util_1 = require("hexo-util");
const stylus_1 = __importDefault(require("stylus"));
// @ts-ignore
hexo.extend.tag.register('youtube', youtubeTag);
// @ts-ignore
hexo.extend.tag.register('p', pTag);
// @ts-ignore
hexo.extend.tag.register('span', spanTag);
// @ts-ignore
hexo.extend.tag.register('bvideo', bvideoTag);
// @ts-ignore
hexo.extend.tag.register('fold', foldTag, { ends: true });
// @ts-ignore
hexo.extend.tag.register('audio', audioTag);
// @ts-ignore
hexo.extend.tag.register('video', videoTag);
// @ts-ignore
hexo.extend.tag.register('videos', videosTag, { ends: true });
// @ts-ignore
hexo.extend.tag.register('link', linkTag);
// @ts-ignore
hexo.extend.tag.register('img', imgTag);
// @ts-ignore
hexo.extend.tag.register('inline_img', inlineImgTag);
// @ts-ignore
hexo.extend.tag.register('checkbox', checkboxTag);
// @ts-ignore
hexo.extend.tag.register('radio', radioTag);
// @ts-ignore
hexo.extend.tag.register('note', noteTag, { ends: true });
// @ts-ignore
hexo.extend.tag.register('timeline', timelineTag, { ends: true });
// @ts-ignore
hexo.extend.tag.register('timenode', timenodeTag, { ends: true });
// @ts-ignore
hexo.extend.tag.register('button', buttonTag);
// @ts-ignore
hexo.extend.tag.register('github', githubTag);
// @ts-ignore
hexo.extend.tag.register('gitlab', gitlabTag);
// @ts-ignore
hexo.extend.tag.register('gitee', giteeTag);
// @ts-ignore
hexo.extend.tag.register('gitea', giteaTag);
// @ts-ignore
hexo.extend.tag.register('bubble', bubbleTag);
// @ts-ignore
hexo.extend.tag.register('keyboard', keyboardTag);
// @ts-ignore
hexo.extend.tag.register('spoiler', spoilerTag);
// @ts-ignore
hexo.extend.tag.register('card', cardTag);
let _span = false;
let _fold = false;
let _link = false;
let _inline_img = false;
let _check = false;
let _note = false;
let _timeline = false;
let _media = false;
let _button = false;
let _repo = false;
let _bubble = false;
let _keyboard = false;
let _spoiler = false;
let _card = false;
// @ts-ignore
hexo.extend.filter.register('after_render:css', (css, data) => {
    if (!data.path.endsWith(node_path_1.default.join('source', 'css', 'index.styl')))
        return css;
    const rendered_css = (0, stylus_1.default)('')
        .define('$tag_span', _span)
        .define('$tag_fold', _fold)
        .define('$tag_link', _link)
        .define('$tag_inline_img', _inline_img)
        .define('$tag_checkbox', _check)
        .define('$tag_note', _note)
        .define('$tag_timeline', _timeline)
        .define('$tag_media', _media)
        .define('$tag_button', _button)
        .define('$tag_repo', _repo)
        .define('$tag_bubble', _bubble)
        .define('$tag_keyboard', _keyboard)
        .define('$tag_spoiler', _spoiler)
        .define('$tag_card', _card)
        .import(node_path_1.default.join(__dirname, 'css', 'index.styl'))
        .render();
    return css.replace('@charset "UTF-8";', `@charset "UTF-8";\n${rendered_css}`);
});
/**
 * Bilibili video tag
 *
 * Syntax:
 *  {% bvideo bvid %}
 */
function bvideoTag([id]) {
    return (0, hexo_util_1.htmlTag)('div', {
        class: 'video-container'
    }, (0, hexo_util_1.htmlTag)('iframe', {
        src: '//player.bilibili.com/player.html?autoplay=0&bvid=' + id,
        frameborder: '0',
        loading: 'lazy',
        allowfullscreen: true
    }, ''), false);
}
/**
 * Youtube tag
 *
 * Syntax:
 *   {% youtube video_id, type, cookie %}
 */
function youtubeTag([id, type = 'video', cookie = true]) {
    if (typeof type === 'boolean') {
        cookie = type;
        type = 'video';
    }
    const ytLink = cookie ? 'https://www.youtube.com' : 'https://www.youtube-nocookie.com';
    const embed = type === 'video' ? '/embed/' : '/embed/videoseries?list=';
    const iframeTag = (0, hexo_util_1.htmlTag)('iframe', {
        src: ytLink + embed + id,
        frameborder: '0',
        loading: 'lazy',
        allowfullscreen: true
    }, '');
    return (0, hexo_util_1.htmlTag)('div', { class: 'video-container' }, iframeTag, false);
}
/**
 * Span tag
 *
 * Syntax:
 *  {% span class content %}
 */
function spanTag([cls, text]) {
    _span = true;
    return (0, hexo_util_1.htmlTag)('span', { class: cls }, text, false);
}
/**
 * P tag
 *
 * Syntax:
 * {% p class content %}
 */
function pTag([cls, text]) {
    _span = true;
    return (0, hexo_util_1.htmlTag)('p', { class: cls }, text, false);
}
/**
 * Fold tag
 *
 * Syntax:
 * {% fold title open %}
 * content
 * {% endfold %}
 */
function foldTag([title, open], content) {
    _fold = true;
    // @ts-ignore
    return (0, hexo_util_1.htmlTag)('details', { open }, (0, hexo_util_1.htmlTag)('summary', {}, title, false) + hexo.render.renderSync({
        text: content,
        engine: 'markdown'
    }).trim(), false);
}
/**
 * Audio tag
 *
 * Syntax:
 * {% audio src %}
 */
function audioTag([src]) {
    _media = true;
    return (0, hexo_util_1.htmlTag)('div', { class: 'audio' }, '<audio controls preload>' + (0, hexo_util_1.htmlTag)('source', {
        src,
        type: 'audio/mp3'
    }, 'Your browser does not support the audio tag.', false), false);
}
/**
 * Video tag
 *
 * Syntax:
 * {% video src %}
 */
function videoTag([src]) {
    _media = true;
    return (0, hexo_util_1.htmlTag)('div', { class: 'video' }, '<video controls preload>' + (0, hexo_util_1.htmlTag)('source', {
        src,
        type: 'video/mp4'
    }, 'Your browser does not support the video tag.', false), false);
}
/**
 * Videos tag
 *
 * Syntax:
 * {% videos %}
 *  {% video src %}
 *  {% video src %}
 * {% endvideos %}
 */
function videosTag([col], content) {
    return (0, hexo_util_1.htmlTag)('div', { class: 'videos', col: col }, content, false);
}
/**
 * Link tag
 *
 * Syntax:
 * {% link title subtitle link %}
 */
function linkTag([title, subtitle, link]) {
    _link = true;
    const isLocal = link.startsWith('/');
    const bottom = `
    <div class="tag-link-tips">${isLocal ? '站内链接' : '引用站外链接'}</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left">
          <i class="solitude fas fa-link"></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">${title}</div>
            <div class="tag-link-sitename">${subtitle}</div>
        </div>
        <i class="solitude fas fa-chevron-right"></i>
    </div>`;
    return (0, hexo_util_1.htmlTag)('a', {
        class: 'tag-link',
        href: link, target: isLocal ? '_self' : '_blank'
    }, bottom, false);
}
/**
 * Image tag
 *
 * Syntax:
 * {% img src alt style %}
 */
function imgTag([src, alt, style]) {
    return (0, hexo_util_1.htmlTag)('img', { src, alt, style });
}
/**
 * Inline Image tag
 *
 * Syntax:
 * {% inline_img src alt height %}
 */
function inlineImgTag([src, title, height]) {
    _inline_img = true;
    return (0, hexo_util_1.htmlTag)('img', { src, title, height, class: 'inline-img' });
}
/**
 * CheckBox tag
 *
 * Syntax:
 * {% checkbox style checked content %}
 */
function checkboxTag([style, checked, content]) {
    _check = true;
    if (typeof content === 'undefined') {
        content = checked;
        checked = 'checked';
    }
    return (0, hexo_util_1.htmlTag)('div', { class: 'checkbox ' + style }, `<input type="checkbox" ${checked === 'unchecked' ? '' : `checked=${checked}`}/>${
    // @ts-ignore
    hexo.render.renderSync({ text: content, engine: 'markdown' }).split('\n').join('')}`, false);
}
/**
 * Radio tag
 *
 * Syntax:
 * {% radio style checked content %}
 */
function radioTag([style, checked, content]) {
    _check = true;
    if (typeof content === 'undefined') {
        content = checked;
        checked = 'checked';
    }
    return (0, hexo_util_1.htmlTag)('div', { class: 'checkbox ' + style }, `<input type="radio" ${checked === 'unchecked' ? '' : `checked=${checked}`}/>${
    // @ts-ignore
    hexo.render.renderSync({ text: content, engine: 'markdown' }).split('\n').join('')}`, false);
}
/**
 * Note tag
 *
 * Syntax:
 * {% note class icon %}
 * content
 * {% endnote %}
 */
function noteTag([cls, icon], content) {
    _note = true;
    if (typeof icon === 'undefined') {
        icon = null;
        cls += ' no-icon';
    }
    // @ts-ignore
    return (0, hexo_util_1.htmlTag)('div', { class: `note ${cls}` }, (icon ? (0, hexo_util_1.htmlTag)('i', { class: `solitude ${icon}` }, '', false) : '') + hexo.render.renderSync({
        text: content,
        engine: 'markdown'
    }).trim(), false);
}
/**
 * TimeLine tag
 *
 * Syntax:
 * {% timeline title %}
 * content
 * {% ebdtimeline %}
 */
function timelineTag([title], content) {
    _timeline = true;
    return (0, hexo_util_1.htmlTag)('div', { class: 'timeline' }, (0, hexo_util_1.htmlTag)('span', { class: 'timeline-title' }, title, false) + content, false);
}
/**
 * TimeNode tag
 *
 * Syntax:
 * {% timenode time %}
 * content
 * {% endtimenode %}
 */
function timenodeTag([time], content) {
    _timeline = true;
    // @ts-ignore
    return (0, hexo_util_1.htmlTag)('div', { class: 'timenode' }, (0, hexo_util_1.htmlTag)('div', { class: 'meta' }, `<p>${time}</p>`, false) + `<div class="body">${hexo.render
        .renderSync({ text: content, engine: 'markdown' })
        .split('\n')
        .join('')}</div>`, false);
}
/**
 * Button tag
 *
 * Syntax:
 * {% button 'icon' 'content' 'url' %}
 */
function buttonTag([icon, content, url]) {
    _button = true;
    if (url === undefined) {
        url = content;
        content = null;
    }
    const onclickAction = url.startsWith('/')
        ? `pjax.loadUrl('${url}')`
        : `window.open('${url}')`;
    const contentHtml = content ? (0, hexo_util_1.htmlTag)('span', {}, content, false) : '';
    return (0, hexo_util_1.htmlTag)('button', {
        class: 'st-btn',
        onclick: onclickAction
    }, `<i class="solitude ${icon}"></i>${contentHtml}`, false);
}
/**
 * Github card tag
 *
 * Syntax:
 * {% github repo %}
 */
function githubTag([repo]) {
    _repo = true;
    const id = Math.random().toString(36).substr(2, 9);
    return (0, hexo_util_1.htmlTag)('div', {
        class: 'repo-card'
    }, `
  <a class='name-${id} repo-title fancybox' href="https://github.com/${repo}"></a>
  <p class='desc-${id} repo-desc'></p>
  <div class="repo-gist">
    <i class="fas fa-star"></i>
    <span class='star-${id}'></span>
    <i class="fas fa-code-branch"></i>
    <span class='fork-${id}'></span>
  </div>
  <img class='lang-${id} repo-language no-lightbox' />
  <script>
    fetch('https://api.github.com/repos/${repo}')
      .then(res => res.json())
      .then(data => {
        document.querySelector('.name-${id}').innerText = data.name;
        document.querySelector('.desc-${id}').innerText = data.description;
        document.querySelector('.star-${id}').innerText = data.stargazers_count;
        document.querySelector('.fork-${id}').innerText = data.forks_count;
        document.querySelector('.lang-${id}').src = 'https://skillicons.dev/icons?i=' + data.language.toLowerCase();
    });
  </script>
  `, false);
}
/**
 * Gitlab card tag
 *
 * Syntax:
 * {% gitlab repo %}
 */
function gitlabTag([repo]) {
    _repo = true;
    const id = Math.random().toString(36).substr(2, 9);
    return (0, hexo_util_1.htmlTag)('div', {
        class: 'repo-card'
    }, `
  <a class='name-${id} repo-title fancybox' href="https://gitlab.com/${repo}"></a>
  <p class='desc-${id} repo-desc'></p>
  <div class="repo-gist">
    <i class="fas fa-star"></i>
    <span class='star-${id}'></span>
    <i class="fas fa-code-branch"></i>
    <span class='fork-${id}'></span>
  </div>
  <img class='lang-${id} repo-language no-lightbox' />
  <script>
    fetch('https://gitlab.com/api/v4/projects/${encodeURIComponent(repo)}')
      .then(res => res.json())
      .then(data => {
        document.querySelector('.name-${id}').innerText = data.name;
        document.querySelector('.desc-${id}').innerText = data.description;
        document.querySelector('.star-${id}').innerText = data.star_count;
        document.querySelector('.fork-${id}').innerText = data.forks_count;
        document.querySelector('.lang-${id}').src = 'https://skillicons.dev/icons?i=' + data.topics[data.topics.length - 1].toLowerCase().replace('.','');
    });
  </script>
  `, false);
}
/**
 * Gitee card tag
 *
 * Syntax:
 * {% gitee repo %}
 */
function giteeTag([repo]) {
    _repo = true;
    const id = Math.random().toString(36).substr(2, 9);
    return (0, hexo_util_1.htmlTag)('div', {
        class: 'repo-card'
    }, `
  <a class='name-${id} repo-title fancybox' href="https://gitee.com/${repo}"></a>
  <p class='desc-${id} repo-desc'></p>
  <div class="repo-gist">
    <i class="fas fa-star"></i>
    <span class='star-${id}'></span>
    <i class="fas fa-code-branch"></i>
    <span class='fork-${id}'></span>
  </div>
  <img class='lang-${id} repo-language no-lightbox' />
  <script>
    fetch('https://gitee.com/api/v5/repos/${repo}')
      .then(res => res.json())
      .then(data => {
        document.querySelector('.name-${id}').innerText = data.name;
        document.querySelector('.desc-${id}').innerText = data.description;
        document.querySelector('.star-${id}').innerText = data.stargazers_count;
        document.querySelector('.fork-${id}').innerText = data.forks_count;
        document.querySelector('.lang-${id}').src = 'https://skillicons.dev/icons?i=' + data.language.toLowerCase();
    });
  </script>
  `, false);
}
/**
 * Gitea card tag
 *
 * Syntax:
 * {% gitea server repo %}
 */
function giteaTag([server, repo]) {
    _repo = true;
    const id = Math.random().toString(36).substr(2, 9);
    return (0, hexo_util_1.htmlTag)('div', {
        class: 'repo-card'
    }, `
  <a class='name-${id} repo-title fancybox' href="${server}/${repo}"></a>
  <p class='desc-${id} repo-desc'></p>
  <div class="repo-gist">
    <i class="fas fa-star"></i>
    <span class='star-${id}'></span>
    <i class="fas fa-code-branch"></i>
    <span class='fork-${id}'></span>
  </div>
  <img class='lang-${id} repo-language no-lightbox' />
  <script>
    fetch('${server}/api/v1/repos/${repo}')
      .then(res => res.json())
      .then(data => {
        document.querySelector('.name-${id}').innerText = data.name;
        document.querySelector('.desc-${id}').innerText = data.description;
        document.querySelector('.star-${id}').innerText = data.stars_count;
        document.querySelector('.fork-${id}').innerText = data.forks_count;
        document.querySelector('.lang-${id}').src = 'https://skillicons.dev/icons?i=' + data.language.toLowerCase();
    });
  </script>
  `, false);
}
/**
 * Bubble notation tag
 *
 * Syntax:
 * {% bubble content notation background-color %}
 */
function bubbleTag([content, notation, color]) {
    _bubble = true;
    if (typeof color === 'undefined') {
        color = 'blue';
    }
    if (color.startsWith('#')) {
        const r = parseInt(color.slice(1, 3), 16) / 255;
        const g = parseInt(color.slice(3, 5), 16) / 255;
        const b = parseInt(color.slice(5, 7), 16) / 255;
        const brightness = 0.5474 * Math.sqrt((Math.pow(r, 2)) + (Math.pow((1.5 * g), 2)) + (Math.pow((0.6 * b), 2))); // 亮度计算近似公式
        return (0, hexo_util_1.htmlTag)('span', { class: 'bubble-content' }, content, false) + (0, hexo_util_1.htmlTag)('span', { class: 'bubble-notation' }, (0, hexo_util_1.htmlTag)('span', {
            class: 'bubble-item',
            style: `background-color:${color}; color: ${brightness > 0.5 ? 'var(--efu-black)' : 'var(--efu-white)'}`
        }, notation, false), false);
    }
    return (0, hexo_util_1.htmlTag)('span', { class: 'bubble-content' }, content, false) + (0, hexo_util_1.htmlTag)('span', { class: 'bubble-notation' }, (0, hexo_util_1.htmlTag)('span', { class: `bubble-item bg-${color}` }, notation, false), false);
}
/**
 * Keyboard tag
 *
 * Syntax:
 * {% keyboard key %}
 */
function keyboardTag([key]) {
    _keyboard = true;
    key = key.toLowerCase();
    switch (key) {
        case 'enter':
            key += '↵';
            break;
        case 'shift':
            key += '⇧';
            break;
        case 'windows':
        case 'window':
        case 'win':
            key = 'win';
        // fallthrough
        case 'command':
            key += '⌘';
            break;
        case 'option':
            key += '⌥';
            break;
        default:
            break;
    }
    key = key[0].toUpperCase() + key.slice(1);
    return (0, hexo_util_1.htmlTag)('span', { class: 'keyboard' }, key, false);
}
/**
 * Spoiler text tag
 *
 * Syntax:
 * {% spoiler style content %}
 */
function spoilerTag([style, content]) {
    _spoiler = true;
    // @ts-ignore
    return (0, hexo_util_1.htmlTag)('span', { class: `spoiler ${style}-text` }, content, false);
}
/**
 * Card tag
 *
 * Syntax:
 * {% card name,url,bg,star,text,icon,tag,w,h %}
 */
function cardTag(args) {
    _card = true;
    // 分数转成星星
    function toStar(num) {
        const fullStars = Math.floor(num);
        const halfStar = num - fullStars !== 0 ? '<i class="fa-solid fa-star-half-alt"></i>' : '';
        const emptyStars = 5 - Math.ceil(num);
        return '<i class="fa-solid fa-star"></i>'.repeat(fullStars) + halfStar + '<i class="fa-regular fa-star"></i>'.repeat(emptyStars);
    }
    const [name = '未知', url = '', bg = '', star = '0', text = '此作品博主暂未作出评价', icon = '', tag = '', w = '200px', h = '275px'] = args.join(' ').split(',').map(arg => arg.trim());
    const backgroundStyle = bg ? `background-image: url(${bg});` : 'background-color: #333;';
    const starHtml = toStar(Number(star));
    return (0, hexo_util_1.htmlTag)('div', {
        title: name,
        referrerPolicy: 'no-referrer',
        class: 'card_box',
        style: `${backgroundStyle} width:${w}; height:${h};`
    }, (0, hexo_util_1.htmlTag)('div', { class: 'card_mask' }, (0, hexo_util_1.htmlTag)('span', {}, text, false)
        + (url ? (0, hexo_util_1.htmlTag)('a', { href: url }, '查看详情', false) : ''), false)
        + (0, hexo_util_1.htmlTag)('div', { class: 'card_top' }, (0, hexo_util_1.htmlTag)('i', { class: icon }, '', false)
            + (0, hexo_util_1.htmlTag)('span', {}, tag, false), false)
        + (0, hexo_util_1.htmlTag)('div', { class: 'card_content' }, (0, hexo_util_1.htmlTag)('span', {}, name, false)
            + (0, hexo_util_1.htmlTag)('div', {}, starHtml, false), false), false);
}
//# sourceMappingURL=index.js.map