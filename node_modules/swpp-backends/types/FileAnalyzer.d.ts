import { FileFetchModeLevel } from './SwppConfig';
/**
 * 构建一个 version json
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 *
 * @param protocol 网站的网络协议
 * @param domain 网站域名（包括二级域名）
 * @param root 网页根目录（首页 index.html 所在目录）
 */
export declare function buildVersionJson(protocol: ('https://' | 'http://'), domain: string, root: string): Promise<VersionJson>;
/**
 * 版本信息（可以用 JSON 序列化）
 * @see VersionMap
 */
export interface VersionJson {
    version: number;
    list: VersionMap;
    external: {
        [propName: string]: any;
    };
}
/**
 * 版本列表
 *
 * + key 为文件的 URL
 * + value {string} 为 URL 对应文件的 md5 值
 * + value {string[]} 为 stable 文件其中包含的 URL
 */
export interface VersionMap {
    [propName: string]: any;
}
/**
 * 判断指定 URL 是否排除
 *
 * + **执行该函数前必须调用过 [loadRules]**
 *
 * @param domain 网站域名
 * @param url 要判断的 URL
 */
export declare function isExclude(domain: string, url: string): boolean;
/**
 * 判断指定 URL 是否是 stable 的
 *
 * + **执行该函数前必须调用过 [loadRules]**
 */
export declare function isStable(url: string): boolean;
/**
 * 从指定 URL 加载 version json
 *
 * + **执行该函数前必须调用过 [loadRules]**
 */
export declare function loadVersionJson(url: string, level?: FileFetchModeLevel): Promise<VersionJson | null>;
/** 提交要存储到 version json 的值 */
export declare function submitCacheInfo(key: string, value: any): void;
/** 添加一个要监听的 URL */
export declare function submitExternalUrl(url: string): void;
/** 注册一个文件处理器 */
export declare function registryFileHandler(handler: FileHandler): void;
/** 查询一个文件处理器 */
export declare function findFileHandler(url: string): FileHandler | undefined;
/**
 * 检索一个 URL 指向的文件中所有地外部链接
 *
 * 该函数会处理该 URL 指向的文件和文件中直接或间接包含的所有 URL
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 *
 * @param domain 网站域名
 * @param url 要检索的 URL
 * @param result 存放结果的对象
 * @param event 检索到一个 URL 时触发的事件
 */
export declare function eachAllLinkInUrl(domain: string, url: string, result: VersionMap, event?: (url: string) => void): Promise<void>;
/**
 * 查询指定 URL 对应的缓存规则
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
export declare function findCache(url: URL | string): any | null;
/**
 * 替换请求
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
export declare function replaceRequest(url: string): string;
export interface FileHandler {
    match: (url: string) => boolean;
    handle: (domain: string, url: string, content: string, result: VersionMap, event?: (url: string) => void) => Promise<any>;
}
