import nodeFetch from 'node-fetch';
export declare function error(type: string, message: string): void;
export declare function warn(type: string, message: string): void;
export interface EjectCache {
    strValue: string;
    nodeEject: any;
}
/**
 * 获取 eject values
 *
 * + **执行该函数前必须调用过 [loadRules]**
 *
 * @param framework 框架对象
 */
export declare function calcEjectValues(framework: any): void;
/**
 * 读取最近的已计算的 eject 数据
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
export declare function readEjectData(): EjectCache | null;
/**
 * 获取指定值的 js 源码表达形式
 * @param obj 要转换的对象
 * @param typeChecker 类型检查器，用于筛除不希望映射的类型
 * @param whiteList 白名单，当 obj 为 Object 时将只转换在白名单中的值（不会传递）
 * @param isTop 是否为顶层元素，为 true 且 obj 为 Object 时将去除最外层的大括号，改为 let（不会传递）
 */
export declare function getSource(obj: any, typeChecker?: ((name: string) => boolean) | undefined, whiteList?: string[] | undefined, isTop?: boolean): string;
/**
 * 拉取文件
 *
 * **调用该函数前必须调用过 [loadRules]**
 */
export declare function fetchFile(link: string): Promise<nodeFetch.Response>;
/**
 * 替换编译期的 URL（CDN 竞速）
 *
 * **调用该函数前必须调用过 [loadRules]**
 */
export declare function replaceDevRequest(link: string): string[] | string;
/** 深度冻结一个对象，这将使得无法修改对象中的任何值，也无法添加新的值 */
export declare function deepFreeze<T>(obj: T): T;
