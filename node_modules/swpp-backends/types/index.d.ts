import { readEjectData, getSource, fetchFile, replaceDevRequest, calcEjectValues, deepFreeze } from './Utils';
import { isExclude, isStable, loadVersionJson, buildVersionJson, eachAllLinkInUrl, findCache, findFileHandler, replaceRequest, submitCacheInfo, submitExternalUrl, registryFileHandler } from './FileAnalyzer';
import { buildServiceWorker } from './ServiceWorkerBuilder';
import { loadRules, addRulesMapEvent } from './SwppRules';
import { loadUpdateJson, submitChange, getShorthand, buildUpdateJson } from './UpdateJsonBuilder';
import { readMergeVersionMap, readNewVersionJson, readOldVersionJson, readRules, readUpdateJson, readAnalyzeResult, writeVariant, readVariant, deleteVariant } from './Variant';
import { refreshUrl, analyzeVersion } from './VersionAnalyzer';
import { buildDomJs } from './DomBuilder';
declare const _default: {
    version: any;
    cache: {
        readEjectData: typeof readEjectData;
        readUpdateJson: typeof readUpdateJson;
        readRules: typeof readRules;
        readMergeVersionMap: typeof readMergeVersionMap;
        readOldVersionJson: typeof readOldVersionJson;
        readNewVersionJson: typeof readNewVersionJson;
        readAnalyzeResult: typeof readAnalyzeResult;
    };
    builder: {
        buildServiceWorker: typeof buildServiceWorker;
        buildDomJs: typeof buildDomJs;
        buildVersionJson: typeof buildVersionJson;
        buildUpdateJson: typeof buildUpdateJson;
        calcEjectValues: typeof calcEjectValues;
        analyzeVersion: typeof analyzeVersion;
    };
    loader: {
        loadRules: typeof loadRules;
        loadUpdateJson: typeof loadUpdateJson;
        loadVersionJson: typeof loadVersionJson;
    };
    event: {
        addRulesMapEvent: typeof addRulesMapEvent;
        refreshUrl: typeof refreshUrl;
        submitChange: typeof submitChange;
        submitCacheInfo: typeof submitCacheInfo;
        submitExternalUrl: typeof submitExternalUrl;
        registryFileHandler: typeof registryFileHandler;
    };
    utils: {
        getSource: typeof getSource;
        getShorthand: typeof getShorthand;
        findCache: typeof findCache;
        fetchFile: typeof fetchFile;
        replaceDevRequest: typeof replaceDevRequest;
        replaceRequest: typeof replaceRequest;
        isStable: typeof isStable;
        isExclude: typeof isExclude;
        findFileHandler: typeof findFileHandler;
        eachAllLinkInUrl: typeof eachAllLinkInUrl;
        deepFreeze: typeof deepFreeze;
        writeVariant: typeof writeVariant;
        readVariant: typeof readVariant;
        deleteVariant: typeof deleteVariant;
    };
};
export default _default;
export { EjectCache } from './Utils';
export { VersionJson, VersionMap } from './FileAnalyzer';
export { ServiceWorkerConfig, SwppConfig, SwppConfigTemplate, DomConfig, VersionJsonConfig, RegisterConfig, ExternalMonitorConfig } from './SwppConfig';
export { SwppRules, CacheRules, SpareURLs, EjectValue } from './SwppRules';
export { UpdateJson, UpdateVersionInfo, FlagStr, ChangeExpression } from './UpdateJsonBuilder';
export { AnalyzeResult } from './VersionAnalyzer';
