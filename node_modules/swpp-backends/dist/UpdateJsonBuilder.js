"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getShorthand = exports.loadUpdateJson = exports.submitChange = exports.buildUpdateJson = void 0;
const SwppConfig_1 = require("./SwppConfig");
const Utils_1 = require("./Utils");
const Variant_1 = require("./Variant");
/**
 * 构建新的 update json
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [buildVersionJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 *
 * @param root 网站根路径（包括网络协议）
 * @param dif 网站文件变化
 */
function buildUpdateJson(root, dif) {
    const rules = (0, Variant_1.readRules)();
    const config = rules.config.json;
    if (!config) {
        (0, Utils_1.error)('UpdateJsonBuilder', '功能未开启');
        throw '功能未开启';
    }
    const externalChange = (0, Variant_1.readEvent)('swppSubmitChange');
    (0, Variant_1.writeVariant)('swppSubmitChange', false);
    const old = (0, Variant_1.readUpdateJson)();
    let global = old?.global ?? 0;
    let userUpdate = rules.update;
    if (userUpdate) {
        if (!userUpdate.flag) {
            (0, Utils_1.error)('UpdateJsonBuilder', '规则文件的 update 项目必须包含 flag 值！');
            throw '规则文件的 update 不合规';
        }
        if (userUpdate.flag === (0, Variant_1.readOldVersionJson)()?.external?.swppFlag)
            userUpdate = undefined;
    }
    if (!dif)
        dif = (0, Variant_1.readAnalyzeResult)();
    // 如果需要强制刷新直接返回
    if (dif.force || userUpdate?.force)
        return {
            global: global + 1,
            info: [{
                    version: old ? old.info[0].version + 1 : 0
                }]
        };
    if (root.endsWith('/'))
        root = root.substring(0, root.length - 1);
    const change = userUpdate?.change ?? [];
    const info = {
        version: old ? old.info[0].version + 1 : 0,
        change
    };
    const list = [...dif.refresh, ...dif.deleted, ...dif.variational, ...dif.rules.remove, ...(userUpdate?.refresh ?? [])];
    const records = {
        // 记录要合并的值
        merge: new Set(),
        // 记录 HTML 值
        html: new Set()
    };
    for (let url of list) {
        if (url.startsWith('/')) { // 本地链接
            const merge = config.merge.find(it => url.startsWith(`/${it}/`));
            if (merge) {
                records.merge.add(merge);
                continue;
            }
            url = root + url;
        }
        if (/(\/|\.html)$/.test(url)) { // is html
            records.html.add(getShorthand(url, 1));
        }
        else { // not html
            change.push({
                flag: 'end',
                value: getShorthand(url)
            });
        }
    }
    if (records.html.size !== 0) {
        if (records.html.size > config.maxHtml) {
            change.push({ flag: 'html' });
        }
        else {
            change.push({
                flag: 'end',
                value: Array.from(records.html)
            });
        }
    }
    if (records.merge.size !== 0) {
        change.push({
            flag: 'begin',
            value: Array.from(records.merge).map(it => `/${it}/`)
        });
    }
    change.push(...externalChange);
    return zipJson({
        global,
        info: [info, ...(old?.info ?? [])]
    });
}
exports.buildUpdateJson = buildUpdateJson;
(0, Variant_1.writeVariant)('swppSubmitChange', []);
/** 提交修改 */
function submitChange(...change) {
    (0, Variant_1.readEvent)('swppSubmitChange').push(...change);
}
exports.submitChange = submitChange;
/**
 * 加载版本文件
 *
 * + **调用该函数前必须调用过 [loadRules]**
 */
async function loadUpdateJson(url, level = SwppConfig_1.FileFetchModeLevel.NORMAL) {
    const key = 'oldUpdateJson';
    const response = await (0, Utils_1.fetchFile)(url).catch(err => err);
    switch (true) {
        case response.status == 404 && (level >= SwppConfig_1.FileFetchModeLevel.NORMAL):
        case response.code == 'ENOTFOUND' && (level == SwppConfig_1.FileFetchModeLevel.LOOSE):
            (0, Utils_1.warn)('UpdateJsonLoader', `拉取 ${url} 时出现 404 错误，如果您是第一次构建请忽略这个警告。`);
            return (0, Variant_1.writeVariant)(key, null);
        default:
            (0, Utils_1.error)('UpdateJsonLoader', `拉取 ${url} 时出现 ${response.status} 错误！`);
            if ('status' in response)
                throw `拉取时出现 ${response.status} 异常`;
            throw response;
        case [200, 301, 302, 307, 308].includes(response.status):
            return (0, Variant_1.writeVariant)(key, await response.json());
    }
}
exports.loadUpdateJson = loadUpdateJson;
function zipJson(json) {
    const record = new Map();
    /** 合并同名项目 */
    function merge(info) {
        const localRecord = new Map();
        if (!info.change)
            return;
        for (let exp of info.change) {
            const value = exp.value;
            if (!localRecord.has(exp.flag))
                localRecord.set(exp.flag, new Set());
            if (!value)
                continue;
            const set = localRecord.get(exp.flag);
            if (typeof value === 'string') {
                set.add(value);
            }
            else {
                value.forEach(it => set.add(it));
            }
        }
        info.change = Array.from(localRecord)
            .map(it => {
            if (it[0] === 'html')
                return [it[0], []];
            const values = Array.from(it[1]);
            if (it[0] === 'str' || it[0] === 'reg')
                return [it[0], values];
            const filtered = values.filter((value, index) => {
                if (it[0] === 'end' && record.has('html') && /(\/|\.html)$/.test(value))
                    return false;
                for (let i = 0; i < values.length; i++) {
                    if (i === index)
                        continue;
                    const that = values[i];
                    switch (it[0]) {
                        case 'end':
                            if (value.endsWith(that))
                                return false;
                            break;
                        case 'begin':
                            if (value.startsWith(that))
                                return false;
                            break;
                    }
                }
                return true;
            });
            return [it[0], filtered];
        }).filter(it => it[1].length !== 0 || it[0] === 'html')
            .map(it => {
            record.set(it[0], it[1]);
            if (it[1].length === 0)
                return { flag: it[0] };
            return {
                flag: it[0],
                value: it[1].length === 1 ? it[1][0] : it[1]
            };
        });
    }
    /** 移除不可达的表达式 */
    function deleteUnreachableExp(list) {
        for (let i = list.length - 1; i > 0; i--) {
            const info = list[i];
            let change = info.change;
            if (!change)
                continue;
            for (let k = 0; k < change.length; k++) {
                const exp = change[k];
                const top = record.get(exp.flag);
                if (exp.flag === 'html') {
                    change.splice(k--, 1);
                    continue;
                }
                let array = typeof exp.value === 'string' ? [exp.value] : exp.value;
                const find = (test) => {
                    if (!top)
                        return false;
                    return top.find(test);
                };
                switch (exp.flag) {
                    case 'end':
                        array = array.filter(value => {
                            if (/(\/|\.html)$/.test(value) && record.has('html'))
                                return false;
                            if (!top)
                                return true;
                            return !find(it => value.endsWith(it));
                        });
                        break;
                    case 'begin':
                        array = array.filter(value => !find(it => value.startsWith(it)));
                        break;
                    case 'str':
                        array = array.filter(value => !find(it => value.includes(it)));
                        break;
                    case 'reg':
                        array = array.filter(value => !top?.includes(value));
                        break;
                }
                switch (array.length) {
                    case 0:
                        change.splice(k--, 1);
                        break;
                    case 1:
                        exp.value = array[0];
                        break;
                    default:
                        exp.value = array;
                        break;
                }
            }
            if (change.length === 0)
                delete info.change;
        }
    }
    function limit(json) {
        const charLimit = (0, Variant_1.readRules)().config.json.charLimit;
        for (let i = 0; i !== -1; ++i) {
            if (i === 999) {
                (0, Utils_1.error)('UpdateJsonLimit', `JSON 输出长度异常：${JSON.stringify(json, null, 4)}`);
                throw 'update json limit error';
            }
            const len = JSON.stringify(json).length;
            if (len > charLimit) {
                if (json.info.length === 1) {
                    delete json.info[0].change;
                }
                else {
                    json.info.pop();
                    if (json.info.length === 1)
                        delete json.info[0].change;
                }
            }
            else
                break;
        }
    }
    merge(json.info[0]);
    deleteUnreachableExp(json.info);
    limit(json);
    return json;
}
/**
 * 获取 URL 的缩写形式
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [buildVersionJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
function getShorthand(url, offset = 0) {
    const map = (0, Variant_1.readMergeVersionMap)();
    let collide = new Set();
    for (let mapKey in map) {
        collide.add(mapKey);
    }
    let index = Math.max(url.lastIndexOf('/', url.length - offset - 1), url.length - 20);
    let result;
    while (true) {
        result = url.substring(index);
        let count = 0;
        const removeSet = new Set();
        for (let url of collide) {
            if (url.endsWith(result)) {
                ++count;
                if (count === 2)
                    break;
            }
            else {
                removeSet.add(url);
            }
        }
        switch (count) {
            case 1:
            case 0: return result;
            case 2:
                --index;
                removeSet.forEach(it => collide.delete(it));
                break;
            default:
                (0, Utils_1.error)('Shorthand', '意料之外的错误：' + count);
                throw '意料之外的错误：' + count;
        }
    }
}
exports.getShorthand = getShorthand;
