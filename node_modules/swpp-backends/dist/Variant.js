"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readEvent = exports.readAnalyzeResult = exports.readUpdateJson = exports.readMergeVersionMap = exports.readNewVersionJson = exports.readOldVersionJson = exports.readRules = exports.deleteVariant = exports.readVariant = exports.writeVariant = void 0;
const Utils_1 = require("./Utils");
const map = new Map();
/** 创建一个变量 */
function writeVariant(key, value) {
    map.set(key, value);
    return value;
}
exports.writeVariant = writeVariant;
/** 读取一个变量 */
function readVariant(key) {
    return map.get(key);
}
exports.readVariant = readVariant;
/** 移除一个变量 */
function deleteVariant(key) {
    map.delete(key);
}
exports.deleteVariant = deleteVariant;
/**
 * 读取最后一次构建的 rules
 *
 * **执行该函数前必须调用过 [loadRules]**
 */
function readRules() {
    return readLoadedData('swppRules', 'RulesReader', '规则文件');
}
exports.readRules = readRules;
/**
 * 读取最后一次加载的 version json
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 */
function readOldVersionJson() {
    return readLoadedData('oldVersionJson', 'OldVersionReader', 'version json');
}
exports.readOldVersionJson = readOldVersionJson;
/**
 * 读取最后一次构建的 VersionJson
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [buildVersionJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
function readNewVersionJson() {
    return readLoadedData('newVersionJson', 'NewVersionReader', 'version json');
}
exports.readNewVersionJson = readNewVersionJson;
/**
 * 读取新旧版本文件合并后的版本地图
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **执行该函数前必须调用过 [buildVersionJson]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
function readMergeVersionMap() {
    const key = 'mergeVersionMap';
    const cache = readVariant(key);
    if (cache)
        return cache;
    const map = {};
    Object.assign(map, readOldVersionJson()?.list ?? {});
    Object.assign(map, readNewVersionJson().list);
    writeVariant(key, (0, Utils_1.deepFreeze)(map));
    return map;
}
exports.readMergeVersionMap = readMergeVersionMap;
/**
 * 读取最后一次加载的版本文件
 *
 * + **调用该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadUpdateJson]**
 */
function readUpdateJson() {
    return readLoadedData('oldUpdateJson', 'OldUpdateJsonReader', 'update json');
}
exports.readUpdateJson = readUpdateJson;
/**
 * 读取分析结果
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **调用该函数前必须调用过 [loadCacheJson]**
 * + **调用该函数前必须调用过 [analyze]**
 */
function readAnalyzeResult() {
    return readLoadedData('swppAnalyze', 'AnalyzeResultReader', 'analyze result');
}
exports.readAnalyzeResult = readAnalyzeResult;
/** 读取一个事件 */
function readEvent(key) {
    return readLoadedData(key, key[0].toUpperCase() + key.substring(1), key);
}
exports.readEvent = readEvent;
function readLoadedData(key, type, name) {
    const item = readVariant(key);
    switch (item) {
        case undefined:
            (0, Utils_1.error)(type, `${name} 尚未初始化`);
            throw name;
        case false:
            (0, Utils_1.error)(type, `${name} 事件周期已经结束`);
            throw name;
        default:
            return item;
    }
}
