"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildServiceWorker = void 0;
const Utils_1 = require("./Utils");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const Variant_1 = require("./Variant");
/**
 * 构建 sw
 *
 * + **执行该函数前必须调用过 [loadRules]**
 * + **执行该函数前必须调用过 [calcEjectValues]**
 */
function buildServiceWorker() {
    const rules = (0, Variant_1.readRules)();
    const eject = (0, Utils_1.readEjectData)();
    const { modifyRequest, skipRequest, fetchFile, getRaceUrls, getSpareUrls, blockRequest, config } = rules;
    if (!config.serviceWorker) {
        (0, Utils_1.error)('ServiceWorkerBuilder', '插件未开启该项');
        throw '功能未开启';
    }
    const serviceWorkerConfig = config.serviceWorker;
    const templatePath = path_1.default.resolve('./', module.path, 'resources/sw-template.js');
    // 获取拓展文件
    let cache = (0, Utils_1.getSource)(rules, undefined, [
        'cacheRules', 'modifyRequest', 'getRaceUrls', 'getSpareUrls', 'blockRequest', 'fetchFile', 'skipRequest', 'isCors', 'isMemoryQueue',
        ...('external' in rules && Array.isArray(rules.external) ? rules.external : [])
    ], true) + '\n';
    let fetchFileReplaced;
    if (!fetchFile) {
        const { JS_CODE_GET_CDN_LIST, JS_CODE_GET_SPARE_URLS, JS_CODE_DEF_FETCH_FILE } = require('./resources/sw-fetch.js');
        let selected;
        if (getRaceUrls) {
            selected = JS_CODE_GET_CDN_LIST;
            fetchFileReplaced = 'getRaceUrls(request.url)';
        }
        else if (getSpareUrls) {
            selected = JS_CODE_GET_SPARE_URLS;
            fetchFileReplaced = 'getSpareUrls(request.url)';
        }
        else {
            selected = JS_CODE_DEF_FETCH_FILE;
            fetchFileReplaced = 'null';
        }
        cache += selected;
    }
    if (!getSpareUrls)
        cache += `\nconst getSpareUrls = _ => {}`;
    if ('afterJoin' in rules)
        cache += `(${(0, Utils_1.getSource)(rules['afterJoin'])})()\n`;
    if ('afterTheme' in rules)
        cache += `(${(0, Utils_1.getSource)(rules['afterTheme'])})()\n`;
    const keyword = "const { cacheRules, fetchFile, isCors, isMemoryQueue } = require('../sw-rules')";
    // noinspection JSUnresolvedVariable
    let content = fs_1.default.readFileSync(templatePath, 'utf8')
        .replaceAll("// [insertion site] values", eject?.strValue ?? '')
        .replaceAll(keyword, cache)
        .replaceAll("'@$$[escape]'", (serviceWorkerConfig.escape).toString())
        .replaceAll("'@$$[cacheName]'", `'${serviceWorkerConfig.cacheName}'`);
    if (fetchFileReplaced) {
        content = content.replaceAll('[] // [spareUrls or raceUrls call]', fetchFileReplaced);
    }
    if (modifyRequest) {
        content = content.replaceAll('// [modifyRequest call]', `
                const modify = modifyRequest(request)
                if (modify) {
                    request = modify
                    url = new URL(request.url)
                }
            `).replaceAll('// [modifyRequest else-if]', `
                else if (modify) handleFetch(fetchWithCache(request, false).catch(err => new Response(err, {status: 499})))
            `);
    }
    if (skipRequest) {
        content = content.replaceAll('// [skipRequest call]', `if (skipRequest(request)) return;`);
    }
    if (blockRequest) {
        content = content.replace('// [blockRequest call]', `
                if (blockRequest(url))
                    return event.respondWith(new Response(null, {status: 204}))
            `);
    }
    // noinspection JSUnresolvedVariable
    if (serviceWorkerConfig.debug) {
        content = content.replaceAll('// [debug delete]', `
                console.debug(\`delete cache: \${url}\`)
            `).replaceAll('// [debug put]', `
                console.debug(\`put cache: \${key}\`)
            `).replaceAll('// [debug message]', `
                console.debug(\`receive: \${event.data}\`)
            `).replaceAll('// [debug escape]', `
                console.debug(\`escape: \${aid}\`)
            `);
    }
    return content;
}
exports.buildServiceWorker = buildServiceWorker;
