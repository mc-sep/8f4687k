"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRulesMapEvent = exports.loadRules = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const SwppConfig_1 = require("./SwppConfig");
const Utils_1 = require("./Utils");
const Variant_1 = require("./Variant");
/**
 * 加载 rules 文件
 * @param root 项目根目录
 * @param fileName rules 文件名称
 * @param selects 附加的可选目录，优先级低于 [root]
 */
function loadRules(root, fileName, selects) {
    const eventList = (0, Variant_1.readEvent)('addRulesMapEvent');
    (0, Variant_1.writeVariant)('addRulesMapEvent', false);
    // 支持的拓展名
    const extensions = ['cjs', 'js'];
    // 根目录下的 rules 文件
    const rootPath = extensions.map(it => path_1.default.resolve(root, `${fileName}.${it}`))
        .find(it => fs_1.default.existsSync(it));
    // 其它可选目录下的 rules 文件
    const selectPath = selects.flatMap(value => extensions.map(it => path_1.default.resolve(value, `${fileName}.${it}`))).find(it => fs_1.default.existsSync(it));
    if (!(rootPath || selectPath)) {
        (0, Utils_1.error)('RulesLoader', '未查询到 rules 文件');
        throw '未查询到 rules 文件';
    }
    const rootRules = rootPath ? { ...require(rootPath) } : {};
    const selectRules = selectPath ? require(selectPath) : {};
    const config = rootRules.config ?? {};
    mergeConfig(config, selectRules.config ?? {});
    mergeConfig(config, SwppConfig_1.defConfig);
    for (let key in selectRules) {
        if (!(key in rootRules))
            rootRules[key] = selectRules[key];
    }
    rootRules.config = config;
    for (let event of eventList) {
        event(rootRules);
    }
    for (let key in defRules) {
        if (!(key in rootRules))
            rootRules[key] = defRules[key];
    }
    return (0, Variant_1.writeVariant)('swppRules', (0, Utils_1.deepFreeze)(rootRules));
}
exports.loadRules = loadRules;
/** 合并配置项 */
function mergeConfig(dist, that) {
    for (let key in that) {
        const distValue = dist[key];
        const thatValue = that[key];
        if (thatValue === undefined || thatValue === null)
            continue;
        switch (typeof distValue) {
            case "undefined":
                dist[key] = thatValue;
                break;
            case "object":
                mergeConfig(distValue, thatValue);
                break;
        }
    }
    return dist;
}
(0, Variant_1.writeVariant)('addRulesMapEvent', []);
/**
 * 添加一个 rules 映射事件，这个事件允许用户修改 rules 的内容
 *
 * 执行时按照注册的顺序执行
 */
function addRulesMapEvent(mapper) {
    (0, Variant_1.readEvent)('addRulesMapEvent').push(mapper);
}
exports.addRulesMapEvent = addRulesMapEvent;
const defRules = {
    config: {},
    // @ts-ignore
    isCors: () => false,
    isMemoryQueue: () => false
};
