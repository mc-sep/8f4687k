"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("./Utils");
const FileAnalyzer_1 = require("./FileAnalyzer");
const ServiceWorkerBuilder_1 = require("./ServiceWorkerBuilder");
const SwppRules_1 = require("./SwppRules");
const UpdateJsonBuilder_1 = require("./UpdateJsonBuilder");
const Variant_1 = require("./Variant");
const VersionAnalyzer_1 = require("./VersionAnalyzer");
const DomBuilder_1 = require("./DomBuilder");
// noinspection JSUnusedGlobalSymbols
exports.default = {
    version: require('../package.json').version,
    cache: {
        readEjectData: Utils_1.readEjectData, readUpdateJson: Variant_1.readUpdateJson,
        readRules: Variant_1.readRules, readMergeVersionMap: Variant_1.readMergeVersionMap,
        readOldVersionJson: Variant_1.readOldVersionJson, readNewVersionJson: Variant_1.readNewVersionJson,
        readAnalyzeResult: Variant_1.readAnalyzeResult
    },
    builder: {
        buildServiceWorker: ServiceWorkerBuilder_1.buildServiceWorker,
        buildDomJs: DomBuilder_1.buildDomJs,
        buildVersionJson: FileAnalyzer_1.buildVersionJson,
        buildUpdateJson: UpdateJsonBuilder_1.buildUpdateJson,
        calcEjectValues: Utils_1.calcEjectValues,
        analyzeVersion: VersionAnalyzer_1.analyzeVersion
    },
    loader: {
        loadRules: SwppRules_1.loadRules, loadUpdateJson: UpdateJsonBuilder_1.loadUpdateJson, loadVersionJson: FileAnalyzer_1.loadVersionJson
    },
    event: {
        addRulesMapEvent: SwppRules_1.addRulesMapEvent, refreshUrl: VersionAnalyzer_1.refreshUrl, submitChange: UpdateJsonBuilder_1.submitChange, submitCacheInfo: FileAnalyzer_1.submitCacheInfo, submitExternalUrl: FileAnalyzer_1.submitExternalUrl, registryFileHandler: FileAnalyzer_1.registryFileHandler
    },
    utils: {
        getSource: Utils_1.getSource, getShorthand: UpdateJsonBuilder_1.getShorthand, findCache: FileAnalyzer_1.findCache,
        fetchFile: Utils_1.fetchFile, replaceDevRequest: Utils_1.replaceDevRequest, replaceRequest: FileAnalyzer_1.replaceRequest,
        isStable: FileAnalyzer_1.isStable, isExclude: FileAnalyzer_1.isExclude, findFileHandler: FileAnalyzer_1.findFileHandler,
        eachAllLinkInUrl: FileAnalyzer_1.eachAllLinkInUrl, deepFreeze: Utils_1.deepFreeze, writeVariant: Variant_1.writeVariant, readVariant: Variant_1.readVariant, deleteVariant: Variant_1.deleteVariant
    }
};
